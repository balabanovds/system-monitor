// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: metric_service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MetricType int32

const (
	MetricType_UNDEFINED        MetricType = 0
	MetricType_LoadAverage1Min  MetricType = 1
	MetricType_LoadAverage5Min  MetricType = 2
	MetricType_LoadAverage15Min MetricType = 3
	MetricType_CPUUser          MetricType = 4
	MetricType_CPUSystem        MetricType = 5
	MetricType_CPUIdle          MetricType = 6
	MetricType_IOtps            MetricType = 7
	MetricType_IOReadKbps       MetricType = 8
	MetricType_IOWriteKbps      MetricType = 9
	MetricType_IOCPUuser        MetricType = 10
	MetricType_IOCPUsystem      MetricType = 11
	MetricType_IOCPUidle        MetricType = 12
	MetricType_FSMBFree         MetricType = 13
	MetricType_FSInodeFree      MetricType = 14
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0:  "UNDEFINED",
		1:  "LoadAverage1Min",
		2:  "LoadAverage5Min",
		3:  "LoadAverage15Min",
		4:  "CPUUser",
		5:  "CPUSystem",
		6:  "CPUIdle",
		7:  "IOtps",
		8:  "IOReadKbps",
		9:  "IOWriteKbps",
		10: "IOCPUuser",
		11: "IOCPUsystem",
		12: "IOCPUidle",
		13: "FSMBFree",
		14: "FSInodeFree",
	}
	MetricType_value = map[string]int32{
		"UNDEFINED":        0,
		"LoadAverage1Min":  1,
		"LoadAverage5Min":  2,
		"LoadAverage15Min": 3,
		"CPUUser":          4,
		"CPUSystem":        5,
		"CPUIdle":          6,
		"IOtps":            7,
		"IOReadKbps":       8,
		"IOWriteKbps":      9,
		"IOCPUuser":        10,
		"IOCPUsystem":      11,
		"IOCPUidle":        12,
		"FSMBFree":         13,
		"FSInodeFree":      14,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_metric_service_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_metric_service_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_metric_service_proto_rawDescGZIP(), []int{0}
}

type ParserType int32

const (
	ParserType_UNDEF       ParserType = 0
	ParserType_LoadAverage ParserType = 1
	ParserType_CPU         ParserType = 2
	ParserType_IO          ParserType = 3
	ParserType_FS          ParserType = 4
	ParserType_Net         ParserType = 5
)

// Enum value maps for ParserType.
var (
	ParserType_name = map[int32]string{
		0: "UNDEF",
		1: "LoadAverage",
		2: "CPU",
		3: "IO",
		4: "FS",
		5: "Net",
	}
	ParserType_value = map[string]int32{
		"UNDEF":       0,
		"LoadAverage": 1,
		"CPU":         2,
		"IO":          3,
		"FS":          4,
		"Net":         5,
	}
)

func (x ParserType) Enum() *ParserType {
	p := new(ParserType)
	*p = x
	return p
}

func (x ParserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParserType) Descriptor() protoreflect.EnumDescriptor {
	return file_metric_service_proto_enumTypes[1].Descriptor()
}

func (ParserType) Type() protoreflect.EnumType {
	return &file_metric_service_proto_enumTypes[1]
}

func (x ParserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParserType.Descriptor instead.
func (ParserType) EnumDescriptor() ([]byte, []int) {
	return file_metric_service_proto_rawDescGZIP(), []int{1}
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Type  MetricType           `protobuf:"varint,2,opt,name=Type,proto3,enum=metric.MetricType" json:"Type,omitempty"`
	Title string               `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	Value float32              `protobuf:"fixed32,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_metric_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_metric_service_proto_rawDescGZIP(), []int{0}
}

func (x *Metric) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Metric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_UNDEFINED
}

func (x *Metric) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Metric) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N int32 `protobuf:"varint,1,opt,name=N,proto3" json:"N,omitempty"`
	M int32 `protobuf:"varint,2,opt,name=M,proto3" json:"M,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_metric_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_metric_service_proto_rawDescGZIP(), []int{1}
}

func (x *Request) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *Request) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

type ParsersInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ParserInfo `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *ParsersInfoResponse) Reset() {
	*x = ParsersInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParsersInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsersInfoResponse) ProtoMessage() {}

func (x *ParsersInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metric_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsersInfoResponse.ProtoReflect.Descriptor instead.
func (*ParsersInfoResponse) Descriptor() ([]byte, []int) {
	return file_metric_service_proto_rawDescGZIP(), []int{2}
}

func (x *ParsersInfoResponse) GetList() []*ParserInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type ParserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        ParserType   `protobuf:"varint,1,opt,name=Type,proto3,enum=metric.ParserType" json:"Type,omitempty"`
	MetricTypes []MetricType `protobuf:"varint,2,rep,packed,name=MetricTypes,proto3,enum=metric.MetricType" json:"MetricTypes,omitempty"`
	Name        string       `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ParserInfo) Reset() {
	*x = ParserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParserInfo) ProtoMessage() {}

func (x *ParserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metric_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParserInfo.ProtoReflect.Descriptor instead.
func (*ParserInfo) Descriptor() ([]byte, []int) {
	return file_metric_service_proto_rawDescGZIP(), []int{3}
}

func (x *ParserInfo) GetType() ParserType {
	if x != nil {
		return x.Type
	}
	return ParserType_UNDEF
}

func (x *ParserInfo) GetMetricTypes() []MetricType {
	if x != nil {
		return x.MetricTypes
	}
	return nil
}

func (x *ParserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_metric_service_proto protoreflect.FileDescriptor

var file_metric_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a,
	0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x4e, 0x12, 0x0c, 0x0a, 0x01, 0x4d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x4d, 0x22, 0x3d, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x7e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x2a, 0xfe, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x31, 0x4d,
	0x69, 0x6e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x35, 0x4d, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x6f, 0x61,
	0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x31, 0x35, 0x4d, 0x69, 0x6e, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x50, 0x55, 0x55, 0x73, 0x65, 0x72, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x50, 0x55, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x50, 0x55, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4f, 0x74, 0x70,
	0x73, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4f, 0x52, 0x65, 0x61, 0x64, 0x4b, 0x62, 0x70,
	0x73, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4b, 0x62,
	0x70, 0x73, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4f, 0x43, 0x50, 0x55, 0x75, 0x73, 0x65,
	0x72, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4f, 0x43, 0x50, 0x55, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4f, 0x43, 0x50, 0x55, 0x69, 0x64, 0x6c,
	0x65, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x53, 0x4d, 0x42, 0x46, 0x72, 0x65, 0x65, 0x10,
	0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x53, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x65, 0x65,
	0x10, 0x0e, 0x2a, 0x4a, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x6f, 0x61, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x50, 0x55, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4f, 0x10, 0x03, 0x12, 0x06, 0x0a,
	0x02, 0x46, 0x53, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x65, 0x74, 0x10, 0x05, 0x32, 0x81,
	0x01, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x00, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_metric_service_proto_rawDescOnce sync.Once
	file_metric_service_proto_rawDescData = file_metric_service_proto_rawDesc
)

func file_metric_service_proto_rawDescGZIP() []byte {
	file_metric_service_proto_rawDescOnce.Do(func() {
		file_metric_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_metric_service_proto_rawDescData)
	})
	return file_metric_service_proto_rawDescData
}

var file_metric_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_metric_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_metric_service_proto_goTypes = []interface{}{
	(MetricType)(0),             // 0: metric.MetricType
	(ParserType)(0),             // 1: metric.ParserType
	(*Metric)(nil),              // 2: metric.Metric
	(*Request)(nil),             // 3: metric.Request
	(*ParsersInfoResponse)(nil), // 4: metric.ParsersInfoResponse
	(*ParserInfo)(nil),          // 5: metric.ParserInfo
	(*timestamp.Timestamp)(nil), // 6: google.protobuf.Timestamp
	(*empty.Empty)(nil),         // 7: google.protobuf.Empty
}
var file_metric_service_proto_depIdxs = []int32{
	6, // 0: metric.Metric.Time:type_name -> google.protobuf.Timestamp
	0, // 1: metric.Metric.Type:type_name -> metric.MetricType
	5, // 2: metric.ParsersInfoResponse.List:type_name -> metric.ParserInfo
	1, // 3: metric.ParserInfo.Type:type_name -> metric.ParserType
	0, // 4: metric.ParserInfo.MetricTypes:type_name -> metric.MetricType
	3, // 5: metric.Metrics.GetStream:input_type -> metric.Request
	7, // 6: metric.Metrics.ParsersInfo:input_type -> google.protobuf.Empty
	2, // 7: metric.Metrics.GetStream:output_type -> metric.Metric
	4, // 8: metric.Metrics.ParsersInfo:output_type -> metric.ParsersInfoResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_metric_service_proto_init() }
func file_metric_service_proto_init() {
	if File_metric_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metric_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParsersInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metric_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metric_service_proto_goTypes,
		DependencyIndexes: file_metric_service_proto_depIdxs,
		EnumInfos:         file_metric_service_proto_enumTypes,
		MessageInfos:      file_metric_service_proto_msgTypes,
	}.Build()
	File_metric_service_proto = out.File
	file_metric_service_proto_rawDesc = nil
	file_metric_service_proto_goTypes = nil
	file_metric_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsClient interface {
	GetStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Metrics_GetStreamClient, error)
	ParsersInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ParsersInfoResponse, error)
}

type metricsClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsClient(cc grpc.ClientConnInterface) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) GetStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Metrics_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Metrics_serviceDesc.Streams[0], "/metric.Metrics/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metrics_GetStreamClient interface {
	Recv() (*Metric, error)
	grpc.ClientStream
}

type metricsGetStreamClient struct {
	grpc.ClientStream
}

func (x *metricsGetStreamClient) Recv() (*Metric, error) {
	m := new(Metric)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricsClient) ParsersInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ParsersInfoResponse, error) {
	out := new(ParsersInfoResponse)
	err := c.cc.Invoke(ctx, "/metric.Metrics/ParsersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServer is the server API for Metrics service.
type MetricsServer interface {
	GetStream(*Request, Metrics_GetStreamServer) error
	ParsersInfo(context.Context, *empty.Empty) (*ParsersInfoResponse, error)
}

// UnimplementedMetricsServer can be embedded to have forward compatible implementations.
type UnimplementedMetricsServer struct {
}

func (*UnimplementedMetricsServer) GetStream(*Request, Metrics_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (*UnimplementedMetricsServer) ParsersInfo(context.Context, *empty.Empty) (*ParsersInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParsersInfo not implemented")
}

func RegisterMetricsServer(s *grpc.Server, srv MetricsServer) {
	s.RegisterService(&_Metrics_serviceDesc, srv)
}

func _Metrics_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricsServer).GetStream(m, &metricsGetStreamServer{stream})
}

type Metrics_GetStreamServer interface {
	Send(*Metric) error
	grpc.ServerStream
}

type metricsGetStreamServer struct {
	grpc.ServerStream
}

func (x *metricsGetStreamServer) Send(m *Metric) error {
	return x.ServerStream.SendMsg(m)
}

func _Metrics_ParsersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).ParsersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metric.Metrics/ParsersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).ParsersInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metrics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metric.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParsersInfo",
			Handler:    _Metrics_ParsersInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _Metrics_GetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metric_service.proto",
}
